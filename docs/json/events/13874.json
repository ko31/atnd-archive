{"results_returned":1,"results_start":1,"events":[{"event":{"event_id":13874,"title":"第3回MessagePackハッカソン（春）","catch":"の内容などを決める","description":"\u003ch1\u003e※参加登録はEventbriteで行ってください\u003c/h1\u003e\n\u003cp\u003eこのATNDは告知用ページとして使っています。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://msghack3.eventbrite.com/\"\u003e参加登録：http://msghack3.eventbrite.com/\u003c/a\u003e\u003c/p\u003e\n\u003ch1\u003e内容\u003c/h1\u003e\n\u003col\u003e\n\t\u003cli\u003e仕様や設計などの相談\u003c/li\u003e\n\t\u003cli\u003eHacking!!\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1\u003e日時\u003c/h1\u003e\n\u003cp\u003e4月3日（日） 14:00〜\u003c/p\u003e\n\u003ch1\u003e場所\u003c/h1\u003e\n\u003cp\u003e株式会社 プリファードインフラストラクチャー会議室\u003c/p\u003e\n\u003cp\u003eありがとうございます！\u003c/p\u003e\n\u003ch1\u003eタイムテーブル\u003cbr /\u003e\n\u003cimg src=\"http://gyazo.com/4ecddd06198a88466cd084fdf9de3d22.png\" alt=\"処理シーケンス\"/\u003e\u003c/h1\u003e\n\u003ch1\u003e議題\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"http://syuki.skr.jp/files/20110402/msghack3.pdf\"\u003eスライド\u003c/a\u003e\u003c/p\u003e\n\u003ch2\u003eMessagePack-RPCのバージョンと名前空間の仕様議論\u003c/h2\u003e\n\u003cp\u003e名前空間：複数のモジュールで構成されるサーバアプリケーションで、RPCのポート番号は1つだけにしたいときに、RPCのメソッド名が重なってしまうことがあるので、名前空間を分けたい。\u003c/p\u003e\n\u003cp\u003e互換性も維持したい（例：名前空間が省略していたら、この名前空間が指定されていることにする）。\u003c/p\u003e\n\u003cp\u003e参考： \u003ca href=\"http://togetter.com/li/83252\"\u003eRPCのバージョン \u0026#8211; Togetter\u003c/a\u003e\u003c/p\u003e\n\u003cul\u003e\n\t\u003cli\u003eプロトコルどうする\u003c/li\u003e\n\t\u003cli\u003eAPIの設計\u0026amp;プロトタイピング\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e：frsyuki、nobu_kさんぜひ\u003c/p\u003e\n\u003ch2\u003eMessagePack-RPCのエラー処理の実装\u003c/h2\u003e\n\u003cp\u003eJava版には実装できそう。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://togetter.com/li/107535\"\u003eMessagePack-\u003cspan class=\"caps\"\u003eRPC\u003c/span\u003e Java版のエラー処理の実装など \u0026#8211; Togetter\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://gist.github.com/470667\"\u003e組み込みエラーの継承関係の案 \u0026#8211; gist\u003c/a\u003e\u003c/p\u003e\n\u003cul\u003e\n\t\u003cli\u003eプロトコル\u003c/li\u003e\n\t\u003cli\u003eAPIの設計\u0026amp;実装\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e：frsyuki、mugaさんぜひ\u003c/p\u003e\n\u003ch2\u003eScala対応\u003c/h2\u003e\n\u003cp\u003eTemplateBuilder周りに修正が必要そう？\u003c/p\u003e\n\u003cp\u003eJavaBean対応（privateフィールドのシリアライズ）\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/takezoux2/msgpack\"\u003etakezoux2/msgpack at github\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e：takezoux2さん、frsyuki、mugaさんぜひ\u003c/p\u003e\n\u003ch2\u003eJRuby対応\u003c/h2\u003e\n\u003cp\u003e無案。\u003c/p\u003e\n\u003ch2\u003e日付/時刻型のシリアライズ方法のガイドライン\u003c/h2\u003e\n\u003cp\u003e「文字列はUTF-8」のように、ガイドラインを決めておくと相互運用性が向上する。\u003c/p\u003e\n\u003cul\u003e\n\t\u003cli\u003e案1：1970-01-01 00:00:00 \u003cspan class=\"caps\"\u003eUTC\u003c/span\u003e からの経過秒を整数で保存\u003c/li\u003e\n\t\u003cli\u003e案2：1970-01-01 00:00:00 \u003cspan class=\"caps\"\u003eUTC\u003c/span\u003e からの経過ミリ秒を整数で保存\u003c/li\u003e\n\t\u003cli\u003e案3：1970-01-01 00:00:00 \u003cspan class=\"caps\"\u003eUTC\u003c/span\u003e からの経過マイクロ秒を整数で保存\u003c/li\u003e\n\t\u003cli\u003e案4：1970-01-01 00:00:00 \u003cspan class=\"caps\"\u003eUTC\u003c/span\u003e からの経過秒（精度は秒またはミリ秒またはマイクロ秒）を浮動小数で保存\u003c/li\u003e\n\t\u003cli\u003e案5：1970-01-01 00:00:00 \u003cspan class=\"caps\"\u003eUTC\u003c/span\u003e からの (経過秒, マイクロ秒) を整数2要素の配列で保存\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\t\u003cli\u003eJava版でDateクラスの組み込みTemplateを実装？\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e：takezoux2さん、frsyuki、mugaさんぜひ\u003c/p\u003e\n\u003ch2\u003ebig decimal型のシリアライズ方法\u003c/h2\u003e\n\u003cul\u003e\n\t\u003cli\u003eJava版でBigDecimalクラスの組み込みTemplateを実装？\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e：mugaさん\u003c/p\u003e\n\u003ch2\u003eJava版のTemplateのプリコンパイラの実装\u003c/h2\u003e\n\u003cp\u003eAndroidではクラスを動的にロードできない制約があるので、JavassistTemplateBuilderが使えない。\u003cbr /\u003e\nそこで、事前に.classを生成しておけると嬉しい。\u003c/p\u003e\n\u003cul\u003e\n\t\u003cli\u003e実装方法\n\t\u003cul\u003e\n\t\t\u003cli\u003eコマンド？\u003c/li\u003e\n\t\t\u003cli\u003eコンパイラプラグイン？\u003c/li\u003e\n\t\t\u003cli\u003eアノテーションプロセッサ？\u003c/li\u003e\n\t\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e：mugaさん\u003c/p\u003e\n\u003ch2\u003eIDLの仕様\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"http://togetter.com/li/116494\"\u003eThriftの謎とIDLの型システム \u0026#8211; Togetter\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://gist.github.com/888627\"\u003eMessagePack \u003cspan class=\"caps\"\u003eIDL\u003c/span\u003e 言語仕様案 \u0026#8211; gist\u003c/a\u003e\u003c/p\u003e\n\u003ch2\u003eIDLの実装方法\u003c/h2\u003e\n\u003ch3\u003eプロトタイプ実装\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/frsyuki/msgpack-idl\"\u003efrsyuki/msgpack-idl.git \u0026#8211; github\u003c/a\u003e\u003c/p\u003e\n\u003cul\u003e\n\t\u003cli\u003e実装済み\n\t\u003cul\u003e\n\t\t\u003cli\u003e構文解析\u003c/li\u003e\n\t\t\u003cli\u003e抽象構文木の構築\u003c/li\u003e\n\t\u003c/ul\u003e\u003c/li\u003e\n\t\u003cli\u003e未実装\n\t\u003cul\u003e\n\t\t\u003cli\u003eGenericsの評価器\u003c/li\u003e\n\t\t\u003cli\u003e継承関係の評価器\u003c/li\u003e\n\t\t\u003cli\u003e型の検査器\u003c/li\u003e\n\t\t\u003cli\u003eコード生成器\u003c/li\u003e\n\t\t\u003cli\u003eコード生成器のプラグイン機構\u003c/li\u003e\n\t\u003c/ul\u003e\u003c/li\u003e\n\t\u003cli\u003e詳細\n\t\u003cul\u003e\n\t\t\u003cli\u003e実装言語：Ruby\u003c/li\u003e\n\t\t\u003cli\u003eパーサライブラリ：\u0026quot;parslet\u0026quot;:http://kschiess.github.com/parslet/\u003c/li\u003e\n\t\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\t\u003cli\u003e所感：frsyuki\n\t\u003cul\u003e\n\t\t\u003cli\u003e面倒なところはクリアした！ 事態収束への道筋は見えた。\u003c/li\u003e\n\t\t\u003cli\u003eThrift互換性は一端捨ててみた。互換性を取るなら、Thrift IDL→MessagePack \u003cspan class=\"caps\"\u003eIDL\u003c/span\u003e ASTへの変換器を実装する方針\u003c/li\u003e\n\t\t\u003cli\u003e今の実装では、テキスト→謎のツリー→AST→IR→言語コード の4パス処理。ちょっと遅い。\u003c/li\u003e\n\t\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003e圧縮\u003c/h2\u003e\n\u003cul\u003e\n\t\u003cli\u003eA案：MessagePackに入れる\u003c/li\u003e\n\t\u003cli\u003eB案：RPCのプロトコルに入れる\u003c/li\u003e\n\t\u003cli\u003eC案：RPCのトランスポートに入れる\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ca href=\"http://togetter.com/li/115344\"\u003eMessagePackで圧縮をサポートして節電する！ \u0026#8211; Togetter\u003c/a\u003e\u003c/p\u003e\n\u003ch2\u003eこのページのような内容を常にまとめておくページが欲しい\u003c/h2\u003e\n\u003cp\u003egithubのリポジトリ（コミットログ）とも連携したいところ。\u003c/p\u003e\n\u003cul\u003e\n\t\u003cli\u003eWikiの中にページを作成する案\u003c/li\u003e\n\t\u003cli\u003e新たにJIRAを入れてチケットベースにする案\n\t\u003cul\u003e\n\t\t\u003cli\u003efrsyuki：JIRAを使ってみているところ\u003c/li\u003e\n\t\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e：frsyuki、kzkさん\u003c/p\u003e\n\u003ch3\u003eJIRAとConfluence\u003c/h3\u003e\n\u003cp\u003e試験的にインストールしてみました：frsyuki\u003c/p\u003e\n\u003cul\u003e\n\t\u003cli\u003ehttp://jira.msgpack.org/\u003c/li\u003e\n\t\u003cli\u003ehttp://wiki.msgpack.org/\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eMessagePackカンファレンスをやりたいという話\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"http://twitter.com/mikeda/status/42224416154849280\"\u003e@mikeda: みんなMessagePackがイイって言ってるなぁ。実際、どういうところに使ってるんだろ\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://twitter.com/kana_t/status/44094130678272000\"\u003e@kana_t: msgpackの資料がすくない\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eみたいな話もあるので、こんな所でこんな感じで使っていて、マジで使える品質だZE☆！ というアッピールができると良さそう！\u003c/p\u003e\n\u003cp\u003e話すネタとか場所とか。\u003c/p\u003e\n\u003ch2\u003e型変換テンプレートがRuby版にも欲しい\u003c/h2\u003e\n\u003cp\u003e本質的にシリアライザには型変換の機構が必要で、日付型や文字列/バイト列問題をスマートに解決するには型変換機構が必須になる。\u003c/p\u003e\n\u003cp\u003eと言うわけで、Ruby版にもC++版やJava版にあるような型変換テンプレートを導入したいが、今のところ設計案なし。\u003c/p\u003e\n\u003ch2\u003e\u003cspan class=\"caps\"\u003eRPC\u003c/span\u003e Ruby版の課題\u003c/h2\u003e\n\u003ch3\u003eEventMachine対応\u003c/h3\u003e\n\u003cp\u003e背景：EventMachineに対応して欲しいと言うtweetが、海外でちょくちょく発生している。\u003cbr /\u003e\nhttp://twitter.com/#!/tobi/status/52112027455471616\u003c/p\u003e\n\u003cp\u003e方針：Java版と同じ設計で、イベントループをプラガブルにする案。ただしEventMachineはNettyと違ってマルチスレッドに対応しておらず、あらかじめ決められたreactor threadなるスレッドでしか駆動できない制限があるため、若干の工夫を要すると思われる\u003c/p\u003e\n\u003ch3\u003eエラー処理、バージョン、名前空間の設計と実装\u003c/h3\u003e\n\u003cp\u003eプロトコルが決まったら、まずプロトタイプ的な実装が必要になりそう。\u003c/p\u003e\n\u003cp\u003eエラー処理のAPIは、現在のAPIではユーザー定義の例外クラスを設定できないので、SessionクラスやSessionPoolクラスなどに例外クラスを設定するメソッドを追加する必要がある。\u003cbr /\u003e\n参考（Java版） \u003ca href=\"http://togetter.com/li/107535\"\u003eMessagePack-\u003cspan class=\"caps\"\u003eRPC\u003c/span\u003e Java版のエラー処理の実装など\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eバージョンのAPIは、無案。たぶんDispatcherの改修で対応可能。\u003c/p\u003e\n\u003cp\u003e名前空間のAPIは、現状のAPIではServerに一つのDispatcherしか渡せないのを、複数の key =\u0026gt; Dispatcher ペアを渡せるようにする。（ついでにQtのsignal/slotの様な疎結合性を高めるディスパッチ方式を導入してみたい）\u003c/p\u003e\n\u003ch3\u003eサーバからクライアントへのRPC\u003c/h3\u003e\n\u003cp\u003e繋げてきたクライアントに対して、逆方向（サーバ→クライアント）にRPCしたいというケースが意外に多くある。\u003c/p\u003e\n\u003cp\u003eAPI的には、Sessionクラスにserve(Dispatcher)メソッドを実装する。あるいは、serveメソッドを別のクラスかモジュールに切り出して、SessionクラスとServerクラスが継承するかMixInする。\u003c/p\u003e\n\u003cp\u003e実装的な問題として、サーバはクライアントに対してSessionインスタンスを作って割り当てる必要がある（今は割り当てていない）。たぶん、Transportクラス（とTransportクラスとServerクラスの間のインタフェース）にも変更が必要になる（Transportクラスが接続を受け付けたときにSessionインスタンスを作成する）。\u003c/p\u003e","event_url":"http://atnd.org/events/13874","started_at":"2011-04-03T14:00:00.000+09:00","ended_at":"2011-04-03T17:00:00.000+09:00","url":"http://msgpack.org/","limit":20,"address":"東京都文京区本郷 2-40-1 本郷東急ビル 4F","place":"株式会社 プリファードインフラストラクチャー","lat":"35.7068792","lon":"139.7598805","owner_id":12010,"owner_nickname":"frsyuki","owner_twitter_id":null,"accepted":12,"waiting":0,"updated_at":"2011-04-02T22:13:59.000+09:00"}}]}